# Capsicain.example.ini config file

# This is an example for a capsicain config. It is not useful, it just shows the basic features.
# See the full capsicain.cajhin.ini for a lot more information.

# If you have trouble figuring out how to 'code' your use case, open an issue here: https://github.com/cajhin/capsicain/issues/

# Rename this file to config.ini to make it active.
# Press [ESC] + [R]  to reset/reload any changes you make to this file.


GLOBAL IniVersion example_v1
                #any string, so you can check with [ESC]+[S]tatus if you're running the right config

GLOBAL ActiveConfigOnStartup 1
                #The section [CONFIG_1] is active on startup
                #Switch configs with [ESC]+[0..9]
                #0=hardcoded = no changes at all to any key events
                #1=QwertZ
                #2=Dvorak


[CONFIG_1]
OPTION configName = Example-Config_1

#This option switches LALT and LWIN on Apple keyboards
#OPTION FlipAltWinOnAppleKeyboards

#verbose logging. Switch with [ESC]+[D]
OPTION Debug



#REWIRE is useful to redefine modifier keys, or define new modifier keys.
#Regular modifier keys are [ MOD12 MOD11 MOD10 MOD9    RALT RWIN RCTRL RSHF    LALT LWIN LCTRL LSHF ]

# Make Tab into a second Left Control key. If you tap (press+release) Tab, the [TAB] key is sent
REWIRE    TAB    LCTRL   TAB

# Make CapsLock key the virtual modifier MOD9 key. If you tap (press+release) CapsLock, nothing happens (No OPeration).
REWIRE    CAPS   MOD9    NOP




#COMBO defines combinations of a basic key together with one or more modifiers.
#You always write it like  
#COMBO  someKeyThatWasPressed  [current state of the modifiers] > someFunction ( parameters )

#Modifiers can be down (&), up (^), tapped (T) or ignored (.)

    # When 'J' is pressed while virtual key MOD9 is down, send key('CursorLeft').
	# Remember, we rewired the Capslock key to MOD9, and the symbol for "and MOD9 down" is [....& .... ....]
COMBO    J		[...& .... ....] > key (LEFT)  
    # Note that Shift + Caps + J  results in  Shift + LEFT. The Shift key is not touched by this mapping, so Windows knows it is down.

#Hint: to look up the correct labels for keys, enable debug mode in capsicain with [ESC]+[D]
#      The capsicain window shows the label for the keys you press.

    # Map Caps + L I K to Cursor Right Up Down, because, HAVING THE CURSOR KEYS ON JKLI IS AWESOME!!! I don't know how people live without it.
COMBO    L		[...& .... ....] > key (RIGHT)  
COMBO    I		[...& .... ....] > key (UP)  
COMBO    K		[...& .... ....] > key (DOWN)  


    # Map LWin + X  to  Alt + F4  ('close window')
COMBO    X       [.... .&..] > combo (LALT+F4)

    # Do nothing when LCtrl + V is pressed
COMBO    V       [.... ..&.] > key (NOP)  #NOP is 'No OPeration', 'no key'


    # Bad config: Map LCtrl + N to CursorLeft
COMBO    N       [.... ..&.] > key (LEFT)
    # This does not work right. Windows knows Ctrl is down, so this results in Control + Left.
    # Here, it would be better to use a 'virtual' MOD9..MOD15 modifier instead of a 'real' modifier, because Windows does not see them.

    # Fix the last one: Map LCtrl + J to CursorLeft, but release the Control key before sending the combo.
	# Function 'moddedKey' is useful for sending combos that involve more than one modifier.
	# It always temporarily releases all pressed keys before it sends out a combo, and presses them again afterwards.
COMBO    J       [.... ..&.] > moddedKey ( LEFT + ....)  #LEFT without any modifiers

    # Map LCtrl + L to Ctrl-Alt-Delete
COMBO    L       [.... ..&.] > moddedKey ( DEL + .... & &. )


    # Map Caps + A to eight times shift+left
COMBO    A		[...& .... ....] > comboNtimes (LShf+LEFT,8)

    # Map LCtrl + Backspace to Ctrl + Z (Undo), but only if NO other modifiers are pressed
COMBO    BSP		[^^^ ^^^^ ^^^^ ^^&^] > combo (LCTRL+Z)
    

    # Map Tapped-LShift + O to 'ö'. This uses the Windows ALT+NUMPAD codes
	# here is a list of all ALT+NUMPAD characters: https://www.alt-codes.net/
COMBO    O		[.... .... ...T] > altChar (148)  # ö

    # Map Tapped-LShift + Tapped-RShift + A to 'Ä'
COMBO    A		[.... ...T ...T] > altChar (142)  # Ä

    # Map Tapped-LShift + A to 'ä'
COMBO    A		[.... .... ...T] > altChar (132)  # ä
    # note that this rule also matches Tap-Lshift + Tap-RShift + A.  The extra tap is ignored. So, this must come *after* the more specific rule for Ä

    # Map Tapped-LShift + Tapped-RShift + Tapped-LControl + MOD9 + MOD10 + S   to   RAlt + RShift + LAlt + LWin + LCtrl + LShift  + U - and first release all keys that are down
COMBO    S		[..&& ...T ..TT] > moddedKey ( U + &..& &&&& )  # Silly, this combo does nothing useful, but it can be done with a one-liner

    # Map Tapped-LControl + H   to "hello(Enter)"
COMBO    H      [..T.]  >  sequence (h_e_l_l_o_RET)



# Alpha mapping is useful to remap many 'plain' keys at once, to create complete keyboard layouts.
# Note that this mapping happens *after* the COMBOs are tested.
# If there is a matching COMBO then the alpha maps have no effect.

# This maps simple alpha keys: Y to Z, and Z to Y, and flip [,] [.]
ALPHA_FROM  Y  Z  , .
ALPHA_TO    Z  Y  . ,
ALPHA_END


# Switch to Config_2 with [ESC]+[2]
# This maps all keys to the Dvorak layout; it does nothing else.
[CONFIG_2]
OPTION configName = DVORAK_Simplified_US

ALPHA_FROM
   q  w  e  r  t     y  u  i  o  p  [  ]
    a  s  d  f  g     h  j  k  l  ;  '
     z  x  c  v  b     n  m  ,  .  /
ALPHA_TO
   '  ,  .  p  y     f  g  c  r  l  /  =      #'this is a comment
    a  o  e  u  i     d  h  t  n  s  -
     ;  q  j  k  x     b  m  w  v  z
ALPHA_END
#Note that you could also write it into one line; char #3 in ALPHA_FROM is simply mapped to char #3 in ALPHA_TO. Whitespaces are ignored.